// Generated by typings
// Source: https://raw.githubusercontent.com/Nagarajutv11/typings-ecgine/master/ecgine.d.ts

// Generated by typings
// Source: ../ecgine/index.d.ts

export interface Ecgine{

    //Need to call when ecgine obj is ready
    ready(onload: Callback):void;
    
    addCommand(id:string, command:()=>IViewInput):void;

    getCommand(id:string):()=>IViewInput;

    addExtPoint(appName:string, points:Supplier<{[name:string]:any[];}>): void;

    //Return all values of given extPoint
    extPoint(extPoint: string): any[];

    service(serviceName: string): any;

    register(serviceName: string, service: any): void;

    required(serviceName: string): void;

    addHelper(fullName: string, helper:FormHelper<any>): void;

    singleton(fullName: string):any;


    registerForm(entity: string,form: Form): void

	form(entity: string): Form

    scriptDone(scriptName:string):void;
}

export declare interface Callback{
    ():void;
}

export declare interface Supplier<T>{
    ():T;
}

export declare interface Consumer<T>{
    (val:T):void;
}

export declare interface FormHelper<T>{
    getDefaultValues(): {[prop:string]: Computation<T, any>};
    getComputations(): {[prop:string]: Computation<T, any>};
    getExistancyConditions(): {[prop:string]: Computation<T, boolean>};
    getCustomWriteControls(): {[prop:string]: Computation<T, boolean>};
    getReferenceFroms(): {[prop:string]: Computation<T, any[]>};
}

export declare interface Computation<T, R>{
    compute($e:any, instance:T, callback:{new (val:R):void}):void;
}

export declare interface ViewManager{
    runCommand(id:string, params?:{[key:string]:string}):void;
    openView(input:IViewInput):void;
}

export declare interface IViewInput{
    viewName:string;
}

export declare interface IView{

}

export declare interface Menu{
    name: string
    command?: string;
    submenus?: Menu[]
}

export declare interface UIBaseDatabaseService{

}

export declare interface DashboardService{

}
export declare interface SavedSearch{

}
export declare interface SavedSearchService{
    
}
export declare interface DatabaseObject{
    _type:string;
}
export declare interface EntityRegistry{
    entity(fullName: string): Entity;
}

export declare interface Entity{
    newInstance():DatabaseObject;
}

export declare interface FormInput extends IViewInput{
    instance:DatabaseObject;
    isEdit:boolean;
    databaseService?:UIBaseDatabaseService;    
    openedFromViewMode?:boolean;
    preAddNew?:Consumer<any>;    
}

export declare interface DashboardInput extends IViewInput{
    dashboardId:string;
    databaseService?:UIBaseDatabaseService;
    dashboardService?:DashboardService;
}

export declare interface ListViewInput extends AbstractListViewInput{    
    isSummary?:boolean;
    isPortlet?:boolean;
}

export declare interface CalendarListViewInput extends AbstractListViewInput {
    displayColumn:string;
    startDateColumn:string;
    endDateColumn:string;
    groupBy:string;
}
export interface AbstractListViewInput extends IViewInput{
    cls:string;
    savedSearch?:SavedSearch;
    filterValues?:{[name:string]:any};
    dbService?:UIBaseDatabaseService;
    savedSearchService?:SavedSearchService;
    isPreview?:boolean; 
}

export declare interface Portlet{
    name:string;
    portletType:string;
    input:PortletInput;
    portletInputProvider?:Supplier<PortletInput>;
}

export declare interface ListPortletInput extends PortletInput{
    searchBuilder:string;
    savedSearch?:string;
    limit?:number;
    isSummary?:boolean;
    dbService?:UIBaseDatabaseService;
    savedSearchService?:SavedSearchService;
}

export interface PortletInput{
    name:string;
}

export declare interface PortletLayout{
    dashboard:string;
    portlet:string;    
    position:number;
    expanded?:boolean;
    isDisabled?:boolean;
    isSticky?:boolean;
}

///Form

export interface Form {

    identity: string;

    name: string;

    fields: PropertyField[];

    actions: FormAction[];

    fieldGroups?: PropertyFieldGroup[];

    inActive?: boolean;

    isPreferred?: boolean;

    enableFieldEditingOnLists?: boolean;
 
    useForPopups?: boolean;

    popupOnly?: boolean;

    subTabs?: PropertySubTab[];

    modelFieldGroups?:ModelFieldGroup[];

}

export interface PropertySubTab {

    tabs: ModelSubTab[];
    
    property?: string;

    model?: string;
}

export interface ModelSubTab {

    property: string;
    
    label: string;

    show?: boolean;

    collectionDisplayType?: string;

    disableAddNew?: boolean;

}
export interface FormAction {

    actionType: string;

    identity?: string;

    label?: string;

    show?: boolean;

    displayAs?: string;
}

export interface PropertyFieldGroup {

    property?: string;

    groups: ModelFieldGroup[];

}

export interface PropertyField {

    model?: string;

    property?: string;

    fields: ModelField[];
}

export interface ModelField {

    label: string;

    property: string;

    path?: string;

    show?: string;

    mandatory?: boolean;

    displayType?: string;

    fieldGroup?: string;

    columnBreak?: boolean;

    spaceBefore?: number;

    sameRowAsPrevious?: boolean;

    checkBoxDefault?: string;

    disableAddNew?: boolean;

    minWidth?: number;

    maxWidth?: number;

    width?: number;

    controlProviderId?: string;

    isDisabled?: boolean;
}

export interface ModelFieldGroup {

    identity: string;

    label: string;

    show?: boolean;

    showFieldGroupTitle?: boolean;

    singleColumn?: boolean;

    collapseGroup?: boolean;
}
