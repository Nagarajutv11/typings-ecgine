// Generated by typings
// Source: ../ecgine/index.d.ts

export var $e:Ecgine;

export interface Callback{
    ():void;
}

export interface Ecgine{

    //Need to call when ecgine obj is ready
    ready(onload: Callback):void;

    addExtPoint(appName:string, points:Supplier<{[name:string]:any[];}>): void;

    //Return all values of given extPoint
    extPoint(extPoint: string): any[];

    service(serviceName: string): any;

    register(serviceName: string, service: any): void;

    required(serviceName: string): void;

    addHelper(fullName: string, helper:FormHelper<any>): void;

    singleton(fullName: string):any;
}

export interface Supplier<T>{
    ():T;
}

export interface Consumer<T>{
    (val:T):void;
}

export interface FormHelper<T>{
    getDefaultValues(): {[prop:string]: Computation<T, any>};
    getComputations(): {[prop:string]: Computation<T, any>};
    getExistancyConditions(): {[prop:string]: Computation<T, boolean>};
    getCustomWriteControls(): {[prop:string]: Computation<T, boolean>};
    getReferenceFroms(): {[prop:string]: Computation<T, any[]>};
}

export interface Computation<T, R>{
    compute($e:any, instance:T, callback:{new (val:R):void}):void;
}

export interface ViewManager{
    openView(input:IViewInput):void;
}

export interface IViewInput{
    viewName():string;
}

export interface IView{

}

export class Menu{
    name: string
    command: Callback
    submenus: Menu[]
}

export interface UIBaseDatabaseService{

}

export interface DashboardService{

}
export interface SavedSearch{

}
export interface SavedSearchService{
    
}

export interface EntityRegistry{
    entity(fullName: string): Entity;
}

export interface Entity{
    newInstance():any;
}

export class FormInput implements IViewInput{
    private databaseService:UIBaseDatabaseService;
    private instance:any;
    private isEdit:boolean;
    private openedFromViewMode:boolean;
    private preAddNew:Consumer<any>;

    public getPreAddNew():Consumer<any>;

    public setPreAddNew(preAddNew:Consumer<any>):void;

    public viewName():string;
}

export class DashboardInput implements IViewInput{
    private dashboardId:string;
    private databaseService:UIBaseDatabaseService;
    private dashboardService:DashboardService;

    public viewName():string;
}

export class ListViewInput extends AbstractListViewInput{
    
    private isSummary:boolean;
    private isPortlet:boolean;
}

export class CalendarListViewInput extends AbstractListViewInput {
    private displayColumn:string;
    private startDateColumn:string;
    private endDateColumn:string;
    private groupBy:string;
}
export abstract class AbstractListViewInput implements IViewInput{
    
    private cls:string;
    private savedSearch:SavedSearch;
    private filterValues:{[name:string]:any};
    private dbService:UIBaseDatabaseService;
    private savedSearchService:SavedSearchService;
    private isPreview:boolean; 

    public viewName():string;
}

export class Portlet{
    private portletInputProvider:Supplier<PortletInput>;
    private portletType:string;
    private input:PortletInput;
    private name:string;  
}

export class ListPortletInput extends PortletInput{

    private searchBuilder:string;
    private savedSearch:string;
    public limit:number;
    private isSummary:boolean;
    private dbService:UIBaseDatabaseService;
    private savedSearchService:SavedSearchService;
}

export abstract class PortletInput{
    
    protected name:string;
}

export class PortletLayout{
    private dashboard:string;
    private portlet:string;    
    private position:number;
    private expanded:boolean;
    private isDisabled:boolean;
    private isSticky:boolean;
}